import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞
String getChatId(String userId, String peerId) {
  return userId.hashCode <= peerId.hashCode
      ? '$userId-$peerId'
      : '$peerId-$userId';
}

class FullScreenImage extends StatelessWidget {
  final String url;

  FullScreenImage({required this.url});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: GestureDetector(
        onTap: () => Navigator.of(context).pop(),
        child: Center(
          child: Image.network(url),
        ),
      ),
    );
  }
}


class IndividualChatScreen extends StatefulWidget {
  final String peerUserId;
  final String userName; // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  final String userImage; // –∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  IndividualChatScreen({required this.peerUserId,required this.userName, required this.userImage});

  @override
  _IndividualChatScreenState createState() => _IndividualChatScreenState();
}

class _IndividualChatScreenState extends State<IndividualChatScreen> {
  final TextEditingController _messageController = TextEditingController();

  @override
  void dispose() {
    _messageController.dispose();
    super.dispose();
  }

  void _sendMessage() {
   final String text = _messageController.text.trim();
   final currentUser = FirebaseAuth.instance.currentUser;

  if (text.isNotEmpty && currentUser != null) {
    final chatId = getChatId(currentUser.uid, widget.peerUserId);
    final message = {
      'text': text,
      'createdAt': FieldValue.serverTimestamp(), // –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      'userId': currentUser.uid, // ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
      // –î—Ä—É–≥–∏–µ –ø–æ–ª—è, —Ç–∞–∫–∏–µ –∫–∞–∫ –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, –∞–≤–∞—Ç–∞—Ä –∏ —Ç.–¥.
    };
     FirebaseFirestore.instance.collection('chats/$chatId/messages').add(message);
     
     FirebaseFirestore.instance.collection('chats').doc(chatId).set({
      'lastMessage': text,
      'lastMessageTime': FieldValue.serverTimestamp(),
    }, SetOptions(merge: true)); // –ò—Å–ø–æ–ª—å–∑—É–µ–º merge, —á—Ç–æ–±—ã –Ω–µ —É–¥–∞–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ


    _messageController.clear();
  }
}

  @override
  Widget build(BuildContext context) {
    final currentUser = FirebaseAuth.instance.currentUser;
    String chatId = getChatId(currentUser!.uid, widget.peerUserId);
    return Scaffold(
      appBar: AppBar(
        title: Row(
          children: [
            CircleAvatar(
              backgroundImage: NetworkImage(widget.userImage),
            ),
            SizedBox (width: 10),
            Text(widget.userName),
          ],
        ),
            leading: BackButton(
              onPressed: () => Navigator.of(context).pop(),
        ),
      ),
      
      body: Column(
        children: [
          Expanded(
            child: StreamBuilder(
              
              stream: FirebaseFirestore.instance.collection('chats/$chatId/messages').orderBy('createdAt', descending: true).snapshots(),
              builder: (context, AsyncSnapshot<QuerySnapshot> snapshot) {
                if (snapshot.hasError) {
                  return Center(child: Text('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'));
                }
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return Center(child: CircularProgressIndicator());
                }
                return ListView.builder(
                  
                  reverse: true,
                  itemCount: snapshot.data!.docs.length,
                  itemBuilder:  (context, index){
                    var messageData= snapshot.data!.docs[index].data() as Map<String, dynamic>;
                    bool myMessage = messageData['userId'] == currentUser.uid;
                    Widget content; // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if (messageData['hasAttachment'] == true && messageData['attachmentUrl'] != null) {
                      // –ï—Å–ª–∏ —ç—Ç–æ –≤–ª–æ–∂–µ–Ω–∏–µ
                      content = InkWell(
                        onTap: () {
                          // –û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
                          Navigator.of(context).push(MaterialPageRoute(
                            builder: (context) => FullScreenImage(url: messageData['attachmentUrl']),
                          ));
                        },
                        child: Image.network(
                          messageData['attachmentUrl'],
                          height: 200,  // –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                          width: 200, // –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                          fit: BoxFit.cover,
                        ),
                      );
                    } else {
                      // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                      content = Text(
                        messageData['text'],
                        style: TextStyle(fontSize: 16),
                      );
                    }
                    return Align(
                      alignment: myMessage ? Alignment.centerRight : Alignment.centerLeft,
                    child: Container(
                       padding: EdgeInsets.all(10),
                      margin: EdgeInsets.symmetric(vertical: 4, horizontal: 8),
                      decoration: BoxDecoration(
                        color: myMessage ? Colors.green[200] : Colors.grey[300],
                        borderRadius: BorderRadius.circular(10),
                    ),
                    child: content,
                    ),
                    );
                  }
                );
              },
            ),
          ),
          _buildMessageInputField(),
        ],
      ),
    );
  }

  Future<void> _pickAndUploadFile() async {
  final picker = ImagePicker();
  final pickedFile = await picker.pickImage(source: ImageSource.gallery);

  if (pickedFile != null) {
    File file = File(pickedFile.path);
    try {
      // –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ Firebase Storage
      String fileName = DateTime.now().millisecondsSinceEpoch.toString();
      Reference ref = FirebaseStorage.instance.ref().child('chat_uploads/$fileName');
      UploadTask uploadTask = ref.putFile(file);
      TaskSnapshot snapshot = await uploadTask;
      String downloadUrl = await snapshot.ref.getDownloadURL();

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å URL-—Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ñ–∞–π–ª –≤ Firestore
      _sendMessageWithAttachment(downloadUrl);
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: $e');
    }
  }
}

void _sendMessageWithAttachment(String fileUrl) {
  final currentUser = FirebaseAuth.instance.currentUser;
  if (currentUser != null) {
    final chatId = getChatId(currentUser.uid, widget.peerUserId);
    FirebaseFirestore.instance.collection('chats/$chatId/messages').add({
      'text': 'üìé Attachment',
      'attachment': fileUrl,
      'createdAt': FieldValue.serverTimestamp(),
      'userId': currentUser.uid,
      'hasAttachment': true,
      'attachmentUrl': fileUrl,
    });
  }
}


  Widget _buildMessageInputField() {
    return SafeArea(
      child: Container(
        padding: EdgeInsets.symmetric(horizontal: 8.0),
        child: Row(
          children: [
            IconButton(
             onPressed: _pickAndUploadFile,
             icon: Icon(Icons.attach_file),
            ),
            Expanded(
              child: TextField(
                controller: _messageController,
                decoration: InputDecoration(
                  hintText: '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...',
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(20.0),
                    borderSide: BorderSide.none,
                  ),
                  filled: true,
                  fillColor: Colors.grey[200],
                ),
              ),
            ),
            SizedBox(width: 8),
            GestureDetector(
              onTap: _sendMessage,
              child: CircleAvatar(
                child: Icon(Icons.send),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
